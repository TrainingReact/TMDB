[{"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\index.js":"1","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\App.js":"2","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\reportWebVitals.js":"3","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Footer.js":"4","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Header.js":"5","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Menu.js":"6","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\Home.js":"7","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\Film.js":"8","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Carousel.js":"9","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\movies\\constants\\constants.js":"10","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\movies\\api\\utils.js":"11","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\film.js":"12","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\home.js":"13","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\TVShows.js":"14"},{"size":684,"mtime":1618236097052,"results":"15","hashOfConfig":"16"},{"size":344,"mtime":1618236097038,"results":"17","hashOfConfig":"16"},{"size":377,"mtime":1618236097059,"results":"18","hashOfConfig":"16"},{"size":425,"mtime":1618236097043,"results":"19","hashOfConfig":"16"},{"size":491,"mtime":1618240757753,"results":"20","hashOfConfig":"16"},{"size":2134,"mtime":1618243213886,"results":"21","hashOfConfig":"16"},{"size":2264,"mtime":1618236143163,"results":"22","hashOfConfig":"16"},{"size":893,"mtime":1618240643640,"results":"23","hashOfConfig":"16"},{"size":7191,"mtime":1618239828107,"results":"24","hashOfConfig":"16"},{"size":1972,"mtime":1618236097054,"results":"25","hashOfConfig":"16"},{"size":5988,"mtime":1618240622895,"results":"26","hashOfConfig":"16"},{"size":746,"mtime":1617983492621,"results":"27","hashOfConfig":"16"},{"size":2107,"mtime":1617983752698,"results":"28","hashOfConfig":"16"},{"size":907,"mtime":1618240661168,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"rp7ijg",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\index.js",[],["61","62"],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\App.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\reportWebVitals.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Footer.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Header.js",["63","64"],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Menu.js",["65"],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\Home.js",["66"],"import { topRatedMovieUrl, topRatedTVShowsUrl, genreUrl } from \"../movies/constants/constants\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useDataToState } from \"../movies/api/utils\";\r\nimport ActionsButtons, { useModal, Modal } from \"../genericComponents/Carousel\";\r\n\r\n/**\r\n * Home page component\r\n * @returns\r\n */\r\nexport default function Home() {\r\n  const respTopRatedMovie = useDataToState({ movie: topRatedMovieUrl, genre: genreUrl });\r\n  const respTopRatedTVShows = useDataToState({ movie: topRatedTVShowsUrl, genre: genreUrl });\r\n  return (\r\n    <main>\r\n      <RandomMovie />\r\n      <div className=\"categoryContainer\">\r\n        <div className=\"titleCategory\">\r\n          <h3>Top Rated Movie</h3>\r\n        </div>\r\n        <hr></hr>\r\n        <ActionsButtons data={respTopRatedMovie} />\r\n        <div className=\"titleCategory\">\r\n          <h3>Top Rated TV Series</h3>\r\n        </div>\r\n        <hr></hr>\r\n        <ActionsButtons data={respTopRatedTVShows} />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\n/**\r\n * The RandomMovie component returns a movie randomly chosen for the Home Page image\r\n * @returns\r\n */\r\nexport function RandomMovie() {\r\n  const [url, setUrl] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [exists, setExists] = useState(false);\r\n  const { isShowing, toggle } = useModal();\r\n  const respRandomMovie = useDataToState({ movie: topRatedMovieUrl, genre: genreUrl });\r\n\r\n  useEffect(() => {\r\n    const randomElement = respRandomMovie[Math.floor(Math.random() * respRandomMovie.length)];\r\n    if (randomElement !== undefined) {\r\n      setUrl(\"https://image.tmdb.org/t/p/w500/\" + randomElement.backdrop_path);\r\n      setData(randomElement);\r\n      setExists(true);\r\n    }\r\n  }, [respRandomMovie]);\r\n  return exists ? (\r\n    <div className=\"randomHighlightedContainer\">\r\n      <Modal isShowing={isShowing} hide={toggle} data={data} />\r\n      <div className=\"resizeHighlightedImg\">\r\n        <img src={url} className=\"imgHighlighted\" onClick={toggle} />\r\n      </div>\r\n      <div className=\"titleHighlightedContainer\">\r\n        <span className=\"titleHighlighted\">\r\n          {data.title}\r\n          <hr className=\"hrHighlighted\" />\r\n          Last Movie\r\n        </span>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n}\r\n","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\Film.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Carousel.js",["67"],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\movies\\constants\\constants.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\movies\\api\\utils.js",["68","69","70"],"import { useEffect, useState } from \"react\";\r\nimport ActionsButtons from \"../../genericComponents/Carousel\";\r\n\r\n/**\r\n * getData function take data and add genre\r\n * @async\r\n * @param {string} data\r\n * @param {string} genres\r\n * @returns {array}\r\n */\r\nexport default async function getData(data, genres) {\r\n  try {\r\n    let movieData = await fetch(data);\r\n    movieData = await movieData.json();\r\n    let genre = await fetch(genres);\r\n    genre = await genre.json();\r\n    const newDataWithGenreAdd = joinGenreinData({\r\n      genre: genre,\r\n      data: movieData,\r\n    });\r\n    const dataReadyTVSForGenres = dataSettingForCarousel(newDataWithGenreAdd);\r\n    return dataReadyTVSForGenres;\r\n  } catch (error) {\r\n    console.log(\"Something went wrong:   \", error);\r\n  }\r\n}\r\n\r\n/**\r\n * getSingleData function take data from a given url\r\n * @async\r\n * @param {string} data\r\n * @returns {object}\r\n */\r\nexport async function getSingleData(data) {\r\n  try {\r\n    let movieData = await fetch(data);\r\n    movieData = await movieData.json();\r\n    return movieData;\r\n  } catch (error) {\r\n    console.log(\"Something went wrong:   \", error);\r\n  }\r\n}\r\n\r\n/**\r\n * dataSettingForCarousel function adds index for carousel (see ActionsButtons in GenericComponent for more details)\r\n * @param {array} data\r\n * @returns {object}\r\n */\r\nexport function dataSettingForCarousel(data) {\r\n  let arrayModifiedForCarousel = data.map((elem) => {\r\n    return {\r\n      ...elem,\r\n      index: data.indexOf(elem),\r\n    };\r\n  });\r\n  return arrayModifiedForCarousel;\r\n}\r\n\r\n/**\r\n * joinGenreinData function allows to join name genre with id genre data film\r\n * @param {object} data\r\n * @returns {object}\r\n */\r\nexport function joinGenreinData(data) {\r\n  let genreResponse = Object.values(data.genre);\r\n  let genreArrayTrasform = [];\r\n  genreResponse.forEach(function (el) {\r\n    genreArrayTrasform = Object.values(el);\r\n  });\r\n\r\n  //copy top rated data parameter to manipulate it with array functions\r\n  let takeResults = data.data.results;\r\n\r\n  //for each film we want to associate the movie's genre_ids with the genre's name.\r\n  //NB. Each film could have more genres to show. This code manage this situation.\r\n  takeResults.forEach(function (item) {\r\n    let result = [];\r\n    for (let w = 0; w < sizeObj(item.genre_ids); w++) {\r\n      result[w] = genreArrayTrasform.filter(function (genElem) {\r\n        return genElem.id === item.genre_ids[w];\r\n      });\r\n    }\r\n    //now genres is added\r\n    let createCompositionOfGenres = [];\r\n    for (let w = 0; w < sizeObj(item.genre_ids); w++) {\r\n      createCompositionOfGenres.push(result[w].length !== 0 && result[w][0] !== undefined ? result[w][0].name + \"  \" : \" \");\r\n    }\r\n    item.genres = createCompositionOfGenres;\r\n  });\r\n  return takeResults;\r\n}\r\n\r\n/**\r\n * sizeObj function is necessary to know the number of objects in movie's genres_id array dimension\r\n * @param {object} obj\r\n * @returns integer\r\n */\r\nexport function sizeObj(obj) {\r\n  var size = 0,\r\n    key;\r\n  for (key in obj) {\r\n    if (obj.hasOwnProperty(key)) size++;\r\n  }\r\n  return size;\r\n}\r\n\r\n/**\r\n * useDataToState personalized hook. It takes in input urls and it returns data\r\n * @param {object} urlList\r\n * @returns {array}\r\n */\r\nexport function useDataToState(urlList) {\r\n  const movie = urlList.movie;\r\n  const genre = urlList.genre;\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    const result = getData(movie, genre);\r\n    result\r\n      .then((elem) => {\r\n        setData(elem);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Something went wrong:   \", error);\r\n      });\r\n  }, [genre, movie]);\r\n  return data;\r\n}\r\n\r\n/**\r\n * DataCategoryForCarousel component allows to manage the carousel view in case of different urls\r\n * @param {url(string), genres(string), key(integer), title(string)} props\r\n * @param {string} props.movie - movie url\r\n * @param {string} props.genre - genre url\r\n * @param {string} props.title - movie title\r\n * @returns\r\n */\r\nexport function DataCategoryForCarousel(props) {\r\n  const { movie: url, genre: genres, title: title } = props;\r\n  const [dataState, setDataState] = useState([]);\r\n  useEffect(() => {\r\n    const result = getData(url, genres);\r\n    result\r\n      .then((elem) => {\r\n        setDataState(elem);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Something went wrong:   \", error);\r\n      });\r\n  }, [url, genres]);\r\n  return !!dataState.length ? (\r\n    <span>\r\n      <div className=\"titleCategory\">\r\n        <h3>{title}</h3>\r\n      </div>\r\n      <hr></hr>\r\n      <ActionsButtons data={dataState} />\r\n    </span>\r\n  ) : null;\r\n}\r\n\r\n/**\r\n * ManageDynamicUrlForCarousel component manages an urls array to allow to show data in carousel\r\n * @param {array} props.arrayUrl - a collection of urls in which every url returns movie of a certain genre\r\n * @param {string} props.genreUrl - genre url\r\n * @returns\r\n */\r\nexport function ManageDynamicUrlForCarousel(props) {\r\n  const { arrayUrl: arrayUrls, genreUrl: genreUrl } = props;\r\n  const items = Object.entries(arrayUrls).map(([key, value]) => {\r\n    return (\r\n      <span key={key}>\r\n        <DataCategoryForCarousel ident={key} movie={value.url} genre={genreUrl} title={value.name} />\r\n      </span>\r\n    );\r\n  });\r\n  return <span>{items}</span>;\r\n}\r\n\r\n/**\r\n * useConstructArrayForDynamicUrls personalized hook. It takes in input urls and it returns an url array\r\n * @param {object} urlList\r\n * @returns {array}\r\n */\r\nexport function useConstructArrayForDynamicUrls(urlList) {\r\n  const genreUrl = urlList.genre;\r\n  const searchFilmUrl = urlList.searchFilm;\r\n  const [data, setData] = useState([]);\r\n  let urlArray = [];\r\n  useEffect(() => {\r\n    const getGenre = getSingleData(genreUrl);\r\n    getGenre.then((resp) => {\r\n      for (let i = 0; i < sizeObj(resp.genres); i++) {\r\n        urlArray.push({ url: searchFilmUrl + resp.genres[i].id, name: resp.genres[i].name });\r\n      }\r\n      setData(urlArray);\r\n    });\r\n  }, [genreUrl, searchFilmUrl, setData]);\r\n  return data;\r\n}\r\n","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\film.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\home.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\TVShows.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":11,"column":9,"nodeType":"77","endLine":11,"endColumn":54},{"ruleId":"75","severity":1,"message":"76","line":14,"column":9,"nodeType":"77","endLine":14,"endColumn":55},{"ruleId":"78","severity":1,"message":"79","line":1,"column":40,"nodeType":"80","messageId":"81","endLine":1,"endColumn":46},{"ruleId":"75","severity":1,"message":"76","line":55,"column":9,"nodeType":"77","endLine":55,"endColumn":70},{"ruleId":"82","severity":1,"message":"83","line":46,"column":38,"nodeType":"84","messageId":"85","endLine":46,"endColumn":52,"fix":"86"},{"ruleId":"82","severity":1,"message":"87","line":138,"column":38,"nodeType":"84","messageId":"85","endLine":138,"endColumn":50,"fix":"88"},{"ruleId":"82","severity":1,"message":"89","line":168,"column":32,"nodeType":"84","messageId":"85","endLine":168,"endColumn":50,"fix":"90"},{"ruleId":"91","severity":1,"message":"92","line":197,"column":6,"nodeType":"93","endLine":197,"endColumn":40,"suggestions":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","no-useless-rename","Destructuring assignment genres unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"97","text":"98"},"Destructuring assignment title unnecessarily renamed.",{"range":"99","text":"100"},"Destructuring assignment genreUrl unnecessarily renamed.",{"range":"101","text":"102"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'urlArray'. Either include it or remove the dependency array.","ArrayExpression",["103"],"no-global-assign","no-unsafe-negation",[1658,1672],"genres",[4049,4061],"title",[4958,4976],"genreUrl",{"desc":"104","fix":"105"},"Update the dependencies array to be: [genreUrl, searchFilmUrl, setData, urlArray]",{"range":"106","text":"107"},[5931,5965],"[genreUrl, searchFilmUrl, setData, urlArray]"]