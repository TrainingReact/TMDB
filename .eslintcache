[{"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\index.js":"1","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\App.js":"2","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\reportWebVitals.js":"3","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Footer.js":"4","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Header.js":"5","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Menu.js":"6","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\Home.js":"7","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\Film.js":"8","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Carousel.js":"9","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\movies\\constants\\constants.js":"10","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\movies\\api\\utils.js":"11","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\film.js":"12","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\home.js":"13","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\TVShows.js":"14"},{"size":684,"mtime":1617979957735,"results":"15","hashOfConfig":"16"},{"size":344,"mtime":1617980796079,"results":"17","hashOfConfig":"16"},{"size":377,"mtime":1617979957741,"results":"18","hashOfConfig":"16"},{"size":425,"mtime":1618233268764,"results":"19","hashOfConfig":"16"},{"size":491,"mtime":1618233311472,"results":"20","hashOfConfig":"16"},{"size":4809,"mtime":1618233647293,"results":"21","hashOfConfig":"16"},{"size":2264,"mtime":1618233226514,"results":"22","hashOfConfig":"16"},{"size":893,"mtime":1618233741684,"results":"23","hashOfConfig":"16"},{"size":7260,"mtime":1618233075019,"results":"24","hashOfConfig":"16"},{"size":1972,"mtime":1618232639169,"results":"25","hashOfConfig":"16"},{"size":6107,"mtime":1618231542478,"results":"26","hashOfConfig":"16"},{"size":746,"mtime":1617983492621,"results":"27","hashOfConfig":"16"},{"size":2107,"mtime":1617983752698,"results":"28","hashOfConfig":"16"},{"size":909,"mtime":1618233764975,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"rp7ijg",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\index.js",[],["60","61"],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\App.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\reportWebVitals.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Footer.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Header.js",["62","63"],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Menu.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\Home.js",["64"],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\Film.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\genericComponents\\Carousel.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\movies\\constants\\constants.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\movies\\api\\utils.js",["65"],"import { useEffect, useState } from \"react\";\r\nimport ActionsButtons from \"../../genericComponents/Carousel\";\r\n\r\n/**\r\n * getData function take data and add genre\r\n * @async\r\n * @param {string} data\r\n * @param {string} genres\r\n * @returns {array}\r\n */\r\nexport default async function getData(data, genres) {\r\n  try {\r\n    let movieData = await fetch(data);\r\n    movieData = await movieData.json();\r\n    let genre = await fetch(genres);\r\n    genre = await genre.json();\r\n    const newDataWithGenreAdd = joinGenreinData({\r\n      genre: genre,\r\n      data: movieData,\r\n    });\r\n    const dataReadyTVSForGenres = dataSettingForCarousel(newDataWithGenreAdd);\r\n    return dataReadyTVSForGenres;\r\n  } catch (error) {\r\n    console.log(\"Something went wrong:   \", error);\r\n  }\r\n}\r\n\r\n/**\r\n * getSingleData function take data from a given url\r\n * @async\r\n * @param {string} data\r\n * @returns {object}\r\n */\r\nexport async function getSingleData(data) {\r\n  try {\r\n    let movieData = await fetch(data);\r\n    movieData = await movieData.json();\r\n    return movieData;\r\n  } catch (error) {\r\n    console.log(\"Something went wrong:   \", error);\r\n  }\r\n}\r\n\r\n/**\r\n * dataSettingForCarousel function adds index for carousel (see ActionsButtons in GenericComponent for more details)\r\n * @param {array} data\r\n * @returns {object}\r\n */\r\nexport function dataSettingForCarousel(data) {\r\n  let arrayModifiedForCarousel = data.map((elem) => {\r\n    return {\r\n      ...elem,\r\n      index: data.indexOf(elem),\r\n    };\r\n  });\r\n  return arrayModifiedForCarousel;\r\n}\r\n\r\n/**\r\n * joinGenreinData function allows to join name genre with id genre data film\r\n * @param {object} data\r\n * @returns {object}\r\n */\r\nexport function joinGenreinData(data) {\r\n  let genreResponse = Object.values(data.genre);\r\n  let genreArrayTrasform = [];\r\n  genreResponse.forEach(function (el) {\r\n    genreArrayTrasform = Object.values(el);\r\n  });\r\n\r\n  //copy top rated data parameter to manipulate it with array functions\r\n  let takeResults = data.data.results;\r\n\r\n  //for each film we want to associate the movie's genre_ids with the genre's name.\r\n  //NB. Each film could have more genres to show. This code manage this situation.\r\n  takeResults.forEach(function (item) {\r\n    let result = [];\r\n    for (let w = 0; w < sizeObj(item.genre_ids); w++) {\r\n      result[w] = genreArrayTrasform.filter(function (genElem) {\r\n        return genElem.id === item.genre_ids[w];\r\n      });\r\n    }\r\n    //now genres is added\r\n    let createCompositionOfGenres = [];\r\n    for (let w = 0; w < sizeObj(item.genre_ids); w++) {\r\n      createCompositionOfGenres.push(result[w].length !== 0 && result[w][0] !== undefined ? result[w][0].name + \"  \" : \" \");\r\n    }\r\n    item.genres = createCompositionOfGenres;\r\n  });\r\n  return takeResults;\r\n}\r\n\r\n/**\r\n * sizeObj function is necessary to know the number of objects in movie's genres_id array dimension\r\n * @param {object} obj\r\n * @returns integer\r\n */\r\nexport function sizeObj(obj) {\r\n  var size = 0,\r\n    key;\r\n  for (key in obj) {\r\n    if (obj.hasOwnProperty(key)) size++;\r\n  }\r\n  return size;\r\n}\r\n\r\n/**\r\n * useDataToState personalized hook. It takes in input urls and it returns data\r\n * @param {object} urlList\r\n * @returns {array}\r\n */\r\nexport function useDataToState(urlList) {\r\n  const movie = urlList.movie;\r\n  const genre = urlList.genre;\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    const result = getData(movie, genre);\r\n    result\r\n      .then((elem) => {\r\n        setData(elem);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Something went wrong:   \", error);\r\n      });\r\n  }, [genre, movie]);\r\n  return data;\r\n}\r\n\r\n/**\r\n * SetDataCategoryForCarousel component allows to manage the carousel view in case of different urls\r\n * @param {url(string), genres(string), key(integer), title(string)} props\r\n * @param {string} props.movie - movie url\r\n * @param {string} props.genre - genre url\r\n * @param {string} props.title - movie title\r\n * @returns\r\n */\r\nexport function SetDataCategoryForCarousel(props) {\r\n  const url = props.movie;\r\n  const genres = props.genre;\r\n  const title = props.title;\r\n  const [dataState, setDataState] = useState([]);\r\n  let bool = false;\r\n  useEffect(() => {\r\n    const result = getData(url, genres);\r\n    result\r\n      .then((elem) => {\r\n        setDataState(elem);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Something went wrong:   \", error);\r\n      });\r\n  }, [url, genres]);\r\n  bool = true ? dataState && dataState.length : (bool = false);\r\n  return bool ? (\r\n    <span>\r\n      <div className=\"titleCategory\">\r\n        <h3>{title}</h3>\r\n      </div>\r\n      <hr></hr>\r\n      <ActionsButtons data={dataState} />\r\n    </span>\r\n  ) : null;\r\n}\r\n\r\n/**\r\n * ManageDynamicUrlForCarousel component manages an urls array to allow to show data in carousel\r\n * @param {array} props.arrayUrl - a collection of urls in which every url returns movie of a certain genre\r\n * @param {string} props.genreUrl - genre url\r\n * @returns\r\n */\r\nexport function ManageDynamicUrlForCarousel(props) {\r\n  const arrayUrls = props.arrayUrl;\r\n  const genreUrl = props.genreUrl;\r\n  const items = Object.entries(arrayUrls).map(([key, value]) => {\r\n    return (\r\n      <span key={key}>\r\n        <SetDataCategoryForCarousel ident={key} movie={value.url} genre={genreUrl} title={value.name} />\r\n      </span>\r\n    );\r\n  });\r\n  return <span>{items}</span>;\r\n}\r\n\r\n/**\r\n * useConstructArrayForDynamicUrls personalized hook. It takes in input urls and it returns an url array\r\n * @param {object} urlList\r\n * @returns {array}\r\n */\r\nexport function useConstructArrayForDynamicUrls(urlList) {\r\n  const genreUrl = urlList.genre;\r\n  const searchFilmUrl = urlList.searchFilm;\r\n  const [data, setData] = useState([]);\r\n  let urlArray = [];\r\n  useEffect(() => {\r\n    const getGenre = getSingleData(genreUrl);\r\n    getGenre.then((resp) => {\r\n      for (let i = 0; i < sizeObj(resp.genres); i++) {\r\n        urlArray.push({ url: searchFilmUrl + resp.genres[i].id, name: resp.genres[i].name });\r\n      }\r\n      setData(urlArray);\r\n    });\r\n  }, [genreUrl, searchFilmUrl, setData]);\r\n  return data;\r\n}\r\n","C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\film.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\home.js",[],"C:\\Users\\ValentinaD'Orazio\\Desktop\\TMDB\\TMDB\\src\\pageComponents\\TVShows.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":11,"column":9,"nodeType":"72","endLine":11,"endColumn":54},{"ruleId":"70","severity":1,"message":"71","line":14,"column":9,"nodeType":"72","endLine":14,"endColumn":55},{"ruleId":"70","severity":1,"message":"71","line":55,"column":9,"nodeType":"72","endLine":55,"endColumn":70},{"ruleId":"73","severity":1,"message":"74","line":202,"column":6,"nodeType":"75","endLine":202,"endColumn":40,"suggestions":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'urlArray'. Either include it or remove the dependency array.","ArrayExpression",["79"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [genreUrl, searchFilmUrl, setData, urlArray]",{"range":"82","text":"83"},[6050,6084],"[genreUrl, searchFilmUrl, setData, urlArray]"]